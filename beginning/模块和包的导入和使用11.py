# -*- coding:utf-8 -*-
"""
作者: gaoxu
日期: 2021年11月11日
"""
# 模块
'''
对于一个.py文件就是一个模块（module），将功能相近的一些函数放到一个文件中
提高了代码的复用性、可维护性，写完后可以很方便的在其他项目中导入
解决了命名的冲突

'''
# 导入模块
'''
1. import 模块名
    调用： 模块名.变量  模块名.函数  模块名.类
2. from 模块名 import 变量,函数,类
    在代码中可以直接使用变量，函数和类
3.from 模块名 import *
    和第一种一样都是导入整个模块，只不过代码的调用不一样了
    在被调用的模块中可以通过列表__all__=[使用*可以访问的内容]来限制通过*可以访问的内容
4.无论是import还是from的形式，都会将模块内容进行加载
    如果有涉及函数的调用，就会执行
    如果不希望其进行调用，就会用到 __name__=='__main__'
            
'''

# 包
'''
文件夹和包
文件夹中放非py文件就是普通文件夹，而放py文件的文件夹就是包
不同包下可以有同名的模块
导入：
from 包 import 模块
from 包.模块 import 类,函数,变量
from .模块 import 类,函数,变量     这个点是指当前目录下的
'''

# 关于 __init__.py文件
'''
包中的文件
当导入包的时候，系统会默认执行这个文件，无论是否导入了这个文件

作用：
1.导入的时候，把一些初始化的东西放进去
2.通过 包.方法   可以直接调用到__init__之中的函数等
3. from 包 import * 表示该包中内容(模块)不能访问
    需要在__init__.py文件中定义__all__来决定能够被导入的模块
    只不过__init__之中要写模块名
'''


# 循环导入
'''
在大型的python项目文件中需要很多的py文件，由于架构不当，可能会出现模块之间的相互导入
例如：一个模块要导入另一个模块，另一个模块的第一句话就是导入原模块，这就循环上了

解决方法：
1.重新架构
2.把第二个模块中导入的方法藏到要调用的函数里面，但是执行到函数里面的导入操作的时候，会执行
第一个模块中的函数调用，为了不调用，需要判断 __name__=='_main_'
3.把导入语句放到模块最后
见demo8
'''